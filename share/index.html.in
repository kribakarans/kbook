<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <title>{{ TITLE_NAME }}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ðŸ“˜</text></svg>">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/github-markdown-css@5.5.1/github-markdown-dark.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css" />
  <style>
    body {
      font-family: 'Roboto', sans-serif;
      margin: 0;
      background: #0d1117;
      color: #c9d1d9;
      display: flex;
      height: 100vh;
      flex-direction: row;
    }

    #container {
      display: flex;
      flex-direction: row;
      width: 100%;
    }

    #sidebar {
      width: 20vw;
      min-width: 200px;
      max-width: 300px;
      background-color: #161b22;
      padding: 1em;
      border-right: 1px solid #30363d;
      overflow-y: auto;
    }

    #sidebar h2 {
      color: #58a6ff;
      font-size: 1.2em;
      margin-top: 0;
    }

    #book-header {
      position: sticky;
      top: 0;
      background-color: #161b22;
      color: #58a6ff;
      margin: 0;
      margin-left: -20px;
      padding: 0.5em;
      z-index: 1000;
    }

    #toc h3 {
      margin: 1em 0 0.5em;
    }

    #toc div {
      margin-bottom: 0.5em;
    }

    #toc a {
      color: #c9d1d9;
      text-decoration: none;
    }

    #toc a:hover {
      text-decoration: underline;
    }

    #main-area {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    #chapter-header {
      display: flex;
      flex-direction: column;
      background: #161b22;
      padding: 15px 20px;
      z-index: 10;
    }

    #chapter-title {
      margin: 0;
      color: #58a6ff;
    }

    #chapter-source {
      margin: 0;
      color: #8b949e;
      font-family: monospace;
      font-size: 0.85em;
    }

    #content {
      flex: 1;
      overflow-y: auto;
      padding: 1em 2em;
    }

    /* Slim scrollbar */
    #sidebar, #content {
      scrollbar-width: thin;
      scrollbar-color: #30363d transparent;
    }

    /* Chrome/Safari/Edge support */
    #sidebar::-webkit-scrollbar,
    #content::-webkit-scrollbar {
      width: 6px;
    }

    #sidebar::-webkit-scrollbar-track,
    #content::-webkit-scrollbar-track {
      background: transparent;
    }

    #sidebar::-webkit-scrollbar-thumb,
    #content::-webkit-scrollbar-thumb {
      background-color: #30363d;
      border-radius: 3px;
    }

    #sidebar::-webkit-scrollbar-thumb:hover,
    #content::-webkit-scrollbar-thumb:hover {
      background-color: #484f58;
    }

    /* Responsive */
    @media (max-width: 768px) {
      body {
        flex-direction: column;
        height: auto;
      }

      #container {
        flex-direction: column;
      }

      #sidebar {
        width: 100%;
        max-height: 40vh;
        border-right: none;
        border-bottom: 1px solid #30363d;
      }

      #content {
        padding: 1em;
      }

      #chapter-header {
        padding: 10px 15px;
      }

      #chapter-title {
        font-size: 1em;
      }

      #chapter-source {
        font-size: 0.8em;
      }
    }
  </style>
</head>

<body>
  <div id="container">
    <nav id="sidebar">
      <h1 id="book-header" onclick="window.open('{{ REPO_URL }}', '_blank')"
        style="cursor: pointer;">ðŸ“˜ {{ TITLE_NAME }}</h1>
      <div id="toc">
        {{ TOC_HTML }}
      </div>
    </nav>
    <main id="main-area">
      <div id="chapter-header">
        <h2 id="chapter-title"></h2>
        <p id="chapter-source"></p>
      </div>
      <div id="content" class="markdown-body"></div>
    </main>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/markdown-it@13.0.1/dist/markdown-it.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
  <script>
    const md = window.markdownit({
      html: true,
      highlight: function (str, lang) {
        if (lang && hljs.getLanguage(lang)) {
          try {
            return hljs.highlight(str, { language: lang }).value;
          } catch (_) { }
        }
        return '';
      }
    });

    function showSubChapters(chapterId, chapterTitle, chapterNum) {
      const subchapters = window.chapterMap?.[chapterId];
      const content = document.getElementById("content");
      const chapterHeader = document.getElementById("chapter-title");
      const chapterSource = document.getElementById("chapter-source");

      chapterSource.textContent = "";
      chapterHeader.textContent = `${chapterNum}. ${chapterTitle}`;

      let html = "";
      if (!subchapters || subchapters.length === 0) {
        html += `<p>No subchapters found.</p>`;
      } else {
        html += "<ul>";
        for (const item of subchapters) {
          html += `<li><a href="#" onclick="loadMarkdown('${item.path}', '${chapterTitle}', '${item.title}')">${item.index}. ${item.title}</a></li>`;
        }
        html += "</ul>";
      }

      content.innerHTML = html;
    }

    function loadMarkdown(path, chapterTitle, subTitle) {
      const header = `${chapterTitle}/${subTitle}`;
      const ext = path.split('.').pop().toLowerCase();
      const content = document.getElementById("content");
      const chapterHeader = document.getElementById("chapter-title");
      const chapterSource = document.getElementById("chapter-source");

      chapterSource.textContent = path;
      chapterHeader.textContent = header;

      fetch(`${path}`)
        .then(res => res.text())
        .then(data => {
          if (ext === 'md') {
            content.innerHTML = md.render(data);
          } else {
            const langMap = {
              'c': 'c',
              'cpp': 'cpp',
              'py': 'python',
              'js': 'javascript',
              'html': 'html',
              'json': 'json',
              'java': 'java',
              'sh': 'bash'
            };
            const lang = langMap[ext] || '';
            const codeBlock = `<pre><code class="language-${lang}">${escapeHtml(data)}</code></pre>`;
            content.innerHTML = codeBlock;
            hljs.highlightAll();
          }
        })
        .catch(err => {
          content.innerHTML = "<p>Error loading file.</p>";
          console.error(err);
        });
    }

    function escapeHtml(str) {
      return str.replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;");
    }

    window.addEventListener("DOMContentLoaded", () => {
      const defaultPath = "{{ DEFAULT_INDEX }}";
      if (defaultPath) {
        loadMarkdown(defaultPath, "", "");
      } else {
        document.getElementById("content").innerHTML = `
          <h2>Hello world!</h2>
          <p>Select a chapter to begin reading.</p>
        `;
      }
    });
  </script>
</body>

</html>
